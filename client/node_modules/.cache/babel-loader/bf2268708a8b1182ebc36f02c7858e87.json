{"ast":null,"code":"// Load modules.\nvar OAuth2Strategy = require('passport-oauth2'),\n  util = require('util'),\n  uri = require('url'),\n  GooglePlusProfile = require('./profile/googleplus'),\n  OpenIDProfile = require('./profile/openid'),\n  InternalOAuthError = require('passport-oauth2').InternalOAuthError,\n  GooglePlusAPIError = require('./errors/googleplusapierror'),\n  UserInfoError = require('./errors/userinfoerror');\n\n/**\n * `Strategy` constructor.\n *\n * The Google authentication strategy authenticates requests by delegating to\n * Google using the OAuth 2.0 protocol.\n *\n * Applications must supply a `verify` callback which accepts an `accessToken`,\n * `refreshToken` and service-specific `profile`, and then calls the `cb`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `clientID`      your Google application's client id\n *   - `clientSecret`  your Google application's client secret\n *   - `callbackURL`   URL to which Google will redirect the user after granting authorization\n *\n * Examples:\n *\n *     passport.use(new GoogleStrategy({\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/google/callback'\n *       },\n *       function(accessToken, refreshToken, profile, cb) {\n *         User.findOrCreate(..., function (err, user) {\n *           cb(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {object} options\n * @param {function} verify\n * @access public\n */\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.authorizationURL = options.authorizationURL || 'https://accounts.google.com/o/oauth2/v2/auth';\n  options.tokenURL = options.tokenURL || 'https://www.googleapis.com/oauth2/v4/token';\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'google';\n  this._userProfileURL = options.userProfileURL || 'https://www.googleapis.com/oauth2/v3/userinfo';\n  var url = uri.parse(this._userProfileURL);\n  if (url.pathname.indexOf('/userinfo') == url.pathname.length - '/userinfo'.length) {\n    this._userProfileFormat = 'openid';\n  } else {\n    this._userProfileFormat = 'google+'; // Google Sign-In\n  }\n}\n\n// Inherit from `OAuth2Strategy`.\nutil.inherits(Strategy, OAuth2Strategy);\n\n/**\n * Retrieve user profile from Google.\n *\n * This function constructs a normalized profile, with the following properties:\n *\n *   - `provider`         always set to `google`\n *   - `id`\n *   - `username`\n *   - `displayName`\n *\n * @param {string} accessToken\n * @param {function} done\n * @access protected\n */\nStrategy.prototype.userProfile = function (accessToken, done) {\n  var self = this;\n  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {\n    var json;\n    if (err) {\n      if (err.data) {\n        try {\n          json = JSON.parse(err.data);\n        } catch (_) {}\n      }\n      if (json && json.error && json.error.message) {\n        return done(new GooglePlusAPIError(json.error.message, json.error.code));\n      } else if (json && json.error && json.error_description) {\n        return done(new UserInfoError(json.error_description, json.error));\n      }\n      return done(new InternalOAuthError('Failed to fetch user profile', err));\n    }\n    try {\n      json = JSON.parse(body);\n    } catch (ex) {\n      return done(new Error('Failed to parse user profile'));\n    }\n    var profile;\n    switch (self._userProfileFormat) {\n      case 'openid':\n        profile = OpenIDProfile.parse(json);\n        break;\n      default:\n        // Google Sign-In\n        profile = GooglePlusProfile.parse(json);\n        break;\n    }\n    profile.provider = 'google';\n    profile._raw = body;\n    profile._json = json;\n    done(null, profile);\n  });\n};\n\n/**\n * Return extra Google-specific parameters to be included in the authorization\n * request.\n *\n * @param {object} options\n * @return {object}\n * @access protected\n */\nStrategy.prototype.authorizationParams = function (options) {\n  var params = {};\n\n  // https://developers.google.com/identity/protocols/OAuth2WebServer\n  if (options.accessType) {\n    params['access_type'] = options.accessType;\n  }\n  if (options.prompt) {\n    params['prompt'] = options.prompt;\n  }\n  if (options.loginHint) {\n    params['login_hint'] = options.loginHint;\n  }\n  if (options.includeGrantedScopes) {\n    params['include_granted_scopes'] = true;\n  }\n\n  // https://developers.google.com/identity/protocols/OpenIDConnect\n  if (options.display) {\n    // Specify what kind of display consent screen to display to users.\n    //   https://developers.google.com/accounts/docs/OpenIDConnect#authenticationuriparameters\n    params['display'] = options.display;\n  }\n\n  // Google Apps for Work\n  if (options.hostedDomain || options.hd) {\n    // This parameter is derived from Google's OAuth 1.0 endpoint, and (although\n    // undocumented) is supported by Google's OAuth 2.0 endpoint was well.\n    //   https://developers.google.com/accounts/docs/OAuth_ref\n    params['hd'] = options.hostedDomain || options.hd;\n  }\n\n  // Google+\n  if (options.requestVisibleActions) {\n    // Space separated list of allowed app actions\n    // as documented at:\n    //  https://developers.google.com/+/web/app-activities/#writing_an_app_activity_using_the_google_apis_client_libraries\n    //  https://developers.google.com/+/api/moment-types/\n    params['request_visible_actions'] = options.requestVisibleActions;\n  }\n\n  // OpenID 2.0 migration\n  if (options.openIDRealm) {\n    // This parameter is needed when migrating users from Google's OpenID 2.0 to OAuth 2.0\n    //   https://developers.google.com/accounts/docs/OpenID?hl=ja#adjust-uri\n    params['openid.realm'] = options.openIDRealm;\n  }\n\n  // Undocumented\n  if (options.approvalPrompt) {\n    params['approval_prompt'] = options.approvalPrompt;\n  }\n  if (options.userID) {\n    // Undocumented, but supported by Google's OAuth 2.0 endpoint.  Appears to\n    // be equivalent to `login_hint`.\n    params['user_id'] = options.userID;\n  }\n  return params;\n};\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;","map":null,"metadata":{},"sourceType":"script"}