{"ast":null,"code":"var uid = require('uid2');\n\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OAuth2Strategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\nfunction PKCESessionStore(options) {\n  if (!options.key) {\n    throw new TypeError('Session-based state store requires a session key');\n  }\n  this._key = options.key;\n}\n\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\nPKCESessionStore.prototype.store = function (req, verifier, state, meta, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n  var key = this._key;\n  var sstate = {\n    handle: uid(24),\n    code_verifier: verifier\n  };\n  if (state) {\n    sstate.state = state;\n  }\n  if (!req.session[key]) {\n    req.session[key] = {};\n  }\n  req.session[key].state = sstate;\n  callback(null, sstate.handle);\n};\n\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\nPKCESessionStore.prototype.verify = function (req, providedState, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n  var key = this._key;\n  if (!req.session[key]) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n  var state = req.session[key].state;\n  if (!state) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n  delete req.session[key].state;\n  if (Object.keys(req.session[key]).length === 0) {\n    delete req.session[key];\n  }\n  if (state.handle !== providedState) {\n    return callback(null, false, {\n      message: 'Invalid authorization request state.'\n    });\n  }\n  return callback(null, state.code_verifier, state.state);\n};\n\n// Expose constructor.\nmodule.exports = PKCESessionStore;","map":null,"metadata":{},"sourceType":"script"}